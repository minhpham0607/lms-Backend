package org.example.lmsbackend.service;

import jakarta.servlet.http.HttpServletRequest;
import org.example.lmsbackend.dto.PaymentDTO;
import org.example.lmsbackend.dto.PaymentRequest;
import org.example.lmsbackend.dto.PaymentResponse;
import org.example.lmsbackend.model.Course;
import org.example.lmsbackend.model.Payment;
import org.example.lmsbackend.model.User;
import org.example.lmsbackend.repository.PaymentMapper;
import org.example.lmsbackend.repository.UserRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@Service
public class PaymentService {

    private final PaymentMapper paymentMapper;
    private final CourseService courseService;
    private final EnrollmentsService enrollmentsService;
    private final VNPayService vnPayService;
    private final ZaloPayService zaloPayService;
    private final UserRepository userRepository;

    public PaymentService(PaymentMapper paymentMapper, CourseService courseService,
                          EnrollmentsService enrollmentsService, VNPayService vnPayService,
                          ZaloPayService zaloPayService, UserRepository userRepository) {
        this.paymentMapper = paymentMapper;
        this.courseService = courseService;
        this.enrollmentsService = enrollmentsService;
        this.vnPayService = vnPayService;
        this.zaloPayService = zaloPayService;
        this.userRepository = userRepository;
    }

    /**
     * T·∫°o payment cho kh√≥a h·ªçc c√≥ ph√≠ - v·ªõi VNPay th·∫≠t
     */
    @Transactional
    public PaymentResponse createPayment(Integer userId, PaymentRequest request, HttpServletRequest httpRequest) {
        try {
            // 1. Ki·ªÉm tra kh√≥a h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
            Optional<Course> courseOpt = courseService.getCourseById(request.getCourseId());
            if (courseOpt.isEmpty()) {
                return new PaymentResponse(false, "Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i");
            }

            Course course = courseOpt.get();

            // 2. Ki·ªÉm tra kh√≥a h·ªçc c√≥ ph√≠ kh√¥ng
            if (course.getPrice().compareTo(BigDecimal.ZERO) == 0) {
                return new PaymentResponse(false, "Kh√≥a h·ªçc n√†y mi·ªÖn ph√≠, kh√¥ng c·∫ßn thanh to√°n");
            }

            // 3. Ki·ªÉm tra user ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc ch∆∞a
            if (enrollmentsService.isStudentEnrolled(userId, request.getCourseId())) {
                return new PaymentResponse(false, "B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi");
            }

            // 4. Ki·ªÉm tra ƒë√£ thanh to√°n th√†nh c√¥ng ch∆∞a
            if (hasCompletedPayment(userId, request.getCourseId())) {
                return new PaymentResponse(false, "B·∫°n ƒë√£ thanh to√°n cho kh√≥a h·ªçc n√†y r·ªìi");
            }

            // 5. Ki·ªÉm tra s·ªë ti·ªÅn thanh to√°n c√≥ ƒë√∫ng kh√¥ng
            if (request.getAmount().compareTo(course.getPrice()) != 0) {
                return new PaymentResponse(false, "S·ªë ti·ªÅn thanh to√°n kh√¥ng ch√≠nh x√°c. Y√™u c·∫ßu: " + request.getAmount() + ", Gi√° kh√≥a h·ªçc: " + course.getPrice());
            }

            // 6. T·∫°o payment record
            Payment payment = new Payment();
            
            // Load actual user and course entities from database
            User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
            payment.setUser(user);
            
            // Course ƒë√£ ƒë∆∞·ª£c load ·ªü tr√™n, s·ª≠ d·ª•ng l·∫°i
            payment.setCourse(course);
            
            payment.setAmount(request.getAmount());
            payment.setStatus(Payment.Status.pending);
            payment.setPaymentMethod(Payment.PaymentMethod.valueOf(request.getPaymentMethod()));
            payment.setTransactionId(generateTransactionId());

            int result = paymentMapper.insertPayment(payment);
            if (result > 0) {
                // 7. T·∫°o URL thanh to√°n v·ªõi VNPay th·∫≠t
                String paymentUrl = generateVNPayUrl(payment, httpRequest);
                
                return new PaymentResponse(true, "T·∫°o payment th√†nh c√¥ng", 
                                         payment.getPaymentId(), paymentUrl, payment.getTransactionId());
            } else {
                return new PaymentResponse(false, "L·ªói khi t·∫°o payment");
            }

        } catch (Exception e) {
            e.printStackTrace();
            return new PaymentResponse(false, "L·ªói h·ªá th·ªëng: " + e.getMessage());
        }
    }

    /**
     * X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng (callback t·ª´ c·ªïng thanh to√°n)
     */
    @Transactional
    public PaymentResponse confirmPayment(String transactionId, String status) {
        try {
            Optional<Payment> paymentOpt = paymentMapper.findPaymentByTransactionId(transactionId);
            if (paymentOpt.isEmpty()) {
                return new PaymentResponse(false, "Kh√¥ng t√¨m th·∫•y giao d·ªãch");
            }

            Payment payment = paymentOpt.get();

            if ("success".equals(status)) {
                // C·∫≠p nh·∫≠t payment status th√†nh completed
                int updated = paymentMapper.updatePaymentStatusByTransactionId(transactionId, "completed");
                
                if (updated > 0) {
                    // T·ª± ƒë·ªông ƒëƒÉng k√Ω kh√≥a h·ªçc cho user
                    boolean enrolled = enrollmentsService.enrollUserInCourse(
                        payment.getUser().getUserId(), 
                        payment.getCourse().getCourseId()
                    );
                    
                    if (enrolled) {
                        return new PaymentResponse(true, "Thanh to√°n th√†nh c√¥ng v√† ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc");
                    } else {
                        return new PaymentResponse(true, "Thanh to√°n th√†nh c√¥ng nh∆∞ng l·ªói khi ƒëƒÉng k√Ω kh√≥a h·ªçc");
                    }
                } else {
                    return new PaymentResponse(false, "L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n");
                }
            } else {
                // C·∫≠p nh·∫≠t payment status th√†nh failed
                int updated = paymentMapper.updatePaymentStatusByTransactionId(transactionId, "failed");
                System.out.println("üîç Debug Payment Failure Update Result: " + updated);
                return new PaymentResponse(false, "Thanh to√°n th·∫•t b·∫°i");
            }

        } catch (Exception e) {
            e.printStackTrace();
            return new PaymentResponse(false, "L·ªói khi x√°c nh·∫≠n thanh to√°n: " + e.getMessage());
        }
    }

    /**
     * L·∫•y l·ªãch s·ª≠ thanh to√°n c·ªßa user
     */
    public List<PaymentDTO> getPaymentHistory(Integer userId) {
        return paymentMapper.getPaymentsByUserId(userId);
    }

    /**
     * L·∫•y danh s√°ch thanh to√°n c·ªßa kh√≥a h·ªçc (cho instructor/admin)
     */
    public List<PaymentDTO> getPaymentsByCourse(Integer courseId) {
        return paymentMapper.getPaymentsByCourseId(courseId);
    }

    /**
     * Ki·ªÉm tra user ƒë√£ thanh to√°n th√†nh c√¥ng cho kh√≥a h·ªçc ch∆∞a
     */
    public boolean hasCompletedPayment(Integer userId, Integer courseId) {
        return paymentMapper.countCompletedPayments(userId, courseId) > 0;
    }

    /**
     * Ki·ªÉm tra user c√≥ th·ªÉ truy c·∫≠p kh√≥a h·ªçc hay kh√¥ng (ƒë√£ thanh to√°n ho·∫∑c kh√≥a h·ªçc mi·ªÖn ph√≠)
     */
    public boolean canAccessCourse(Integer userId, Integer courseId) {
        try {
            // Ki·ªÉm tra user ƒë√£ enrolled ch∆∞a
            if (enrollmentsService.isStudentEnrolled(userId, courseId)) {
                return true;
            }
            
            // Ki·ªÉm tra kh√≥a h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
            Optional<Course> courseOpt = courseService.getCourseById(courseId);
            if (courseOpt.isEmpty()) {
                return false;
            }
            
            Course course = courseOpt.get();
            
            // N·∫øu kh√≥a h·ªçc mi·ªÖn ph√≠ th√¨ cho ph√©p truy c·∫≠p
            if (course.getPrice().compareTo(BigDecimal.ZERO) == 0) {
                // T·ª± ƒë·ªông enroll user v√†o kh√≥a h·ªçc mi·ªÖn ph√≠
                enrollmentsService.enrollUserInCourse(userId, courseId);
                return true;
            }
            
            // Ki·ªÉm tra ƒë√£ thanh to√°n th√†nh c√¥ng ch∆∞a
            return hasCompletedPayment(userId, courseId);
            
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * T·∫°o transaction ID duy nh·∫•t - VNPay compatible format
     * VNPay TxnRef ch·ªâ cho ph√©p t·ªëi ƒëa 100 k√Ω t·ª±, n√™n t·∫°o ID ng·∫Øn g·ªçn h∆°n
     */
    private String generateTransactionId() {
        // T·∫°o ID ng·∫Øn g·ªçn: timestamp + random 8 k√Ω t·ª±
        long timestamp = System.currentTimeMillis();
        String randomPart = UUID.randomUUID().toString().substring(0, 8);
        return timestamp + "_" + randomPart; // V√≠ d·ª•: 1752614605850_d68a14ba
    }

    /**
     * T·∫°o URL thanh to√°n VNPay th·∫≠t
     */
    private String generateVNPayUrl(Payment payment, HttpServletRequest httpRequest) {
        try {
            // Ch·ªâ s·ª≠ d·ª•ng VNPay cho vnpay payment method
            if (payment.getPaymentMethod() == Payment.PaymentMethod.vnpay) {
                // üîß FIX: Chuy·ªÉn ƒë·ªïi amount ch√≠nh x√°c cho VNPay (VND * 100)
                int amount = payment.getAmount().multiply(new BigDecimal("100")).intValue();
                String orderInfo = "Thanh toan khoa hoc " + payment.getCourse().getCourseId();
                // S·ª≠ d·ª•ng ReturnUrl t·ª´ VNPayConfig, kh√¥ng override
                String returnUrl = null; // VNPayService s·∫Ω d√πng config default
                
                // üîß FIX: S·ª≠ d·ª•ng Transaction ID t·ª´ database l√†m VNPay TxnRef ƒë·ªÉ ƒë·ªìng b·ªô h√≥a
                return vnPayService.createOrderWithTxnRef(httpRequest, amount, orderInfo, returnUrl, payment.getTransactionId());
            } else {
                // Fallback cho c√°c method kh√°c (momo, zalopay, credit_card)
                return "http://localhost:4200/payment-gateway?transaction_id=" + payment.getTransactionId() +
                       "&amount=" + payment.getAmount() + 
                       "&method=" + payment.getPaymentMethod() +
                       "&course_id=" + payment.getCourse().getCourseId() +
                       "&return_url=http://localhost:4200/courses";
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Fallback to mock gateway if VNPay fails
            return "http://localhost:4200/payment-gateway?transaction_id=" + payment.getTransactionId() +
                   "&amount=" + payment.getAmount() + 
                   "&method=" + payment.getPaymentMethod() +
                   "&course_id=" + payment.getCourse().getCourseId() +
                   "&return_url=http://localhost:4200/courses";
        }
    }

    /**
     * X·ª≠ l√Ω callback t·ª´ VNPay
     */
    public PaymentResponse handleVNPayCallback(HttpServletRequest request) {
        try {
            int result = vnPayService.orderReturn(request);
            String transactionId = request.getParameter("vnp_TxnRef");
            
            System.out.println("üîÑ VNPay Callback - TxnRef: " + transactionId);
            System.out.println("üîÑ VNPay Callback - Result: " + result);
            
            // üîß FIX: L∆∞u vnpayTxnRef v√†o database ƒë·ªÉ ƒë·ªìng b·ªô h√≥a
            updatePaymentVnpayTxnRef(transactionId, transactionId);
            
            if (result == 1) {
                // Thanh to√°n th√†nh c√¥ng
                return confirmPayment(transactionId, "success");
            } else if (result == 0) {
                // Thanh to√°n th·∫•t b·∫°i
                return confirmPayment(transactionId, "failed");
            } else {
                // Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá
                return new PaymentResponse(false, "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return new PaymentResponse(false, "L·ªói x·ª≠ l√Ω callback: " + e.getMessage());
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t vnpayTxnRef cho payment ƒë·ªÉ ƒë·ªìng b·ªô h√≥a
     */
    private void updatePaymentVnpayTxnRef(String transactionId, String vnpayTxnRef) {
        try {
            paymentMapper.updatePaymentVnpayTxnRef(transactionId, vnpayTxnRef);
            System.out.println("‚úÖ Updated vnpayTxnRef: " + vnpayTxnRef + " for transaction: " + transactionId);
        } catch (Exception e) {
            System.err.println("‚ùå Failed to update vnpayTxnRef: " + e.getMessage());
        }
    }

    /**
     * T·∫°o payment ZaloPay
     */
    @Transactional
    public PaymentResponse createZaloPayPayment(Integer userId, Integer courseId, Long amount, String orderInfo, String description) {
        try {
            // 1. Ki·ªÉm tra kh√≥a h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
            Optional<Course> courseOpt = courseService.getCourseById(courseId);
            if (courseOpt.isEmpty()) {
                return new PaymentResponse(false, "Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i");
            }

            Course course = courseOpt.get();

            // 2. Ki·ªÉm tra user ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc ch∆∞a
            if (enrollmentsService.isUserEnrolledInCourse(userId, courseId)) {
                return new PaymentResponse(false, "B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc n√†y r·ªìi");
            }

            // 3. Ki·ªÉm tra user ƒë√£ thanh to√°n cho kh√≥a h·ªçc ch∆∞a
            List<Payment> existingPayments = paymentMapper.findByCourseIdAndUserId(courseId, userId);
            for (Payment payment : existingPayments) {
                if ("completed".equals(payment.getStatus())) {
                    return new PaymentResponse(false, "B·∫°n ƒë√£ thanh to√°n cho kh√≥a h·ªçc n√†y r·ªìi");
                }
            }

            // 4. T·∫°o payment record
            Payment payment = new Payment();
            
            // L·∫•y User v√† Course objects
            Optional<User> userOpt = userRepository.findById(userId);
            if (userOpt.isEmpty()) {
                return new PaymentResponse(false, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
            }
            
            payment.setUser(userOpt.get());
            payment.setCourse(course);
            payment.setAmount(BigDecimal.valueOf(amount));
            payment.setPaymentMethod(Payment.PaymentMethod.zalopay);
            payment.setStatus(Payment.Status.pending);
            payment.setTransactionId(UUID.randomUUID().toString());

            paymentMapper.insertPayment(payment);

            // 5. T·∫°o order v·ªõi ZaloPay
            Map<String, Object> zaloPayResponse = zaloPayService.createOrder(amount, description, orderInfo, courseId.toString());

            if (zaloPayResponse != null && "1".equals(zaloPayResponse.get("return_code").toString())) {
                // Th√†nh c√¥ng
                String orderUrl = (String) zaloPayResponse.get("order_url");
                String appTransId = (String) zaloPayResponse.get("app_trans_id");

                // C·∫≠p nh·∫≠t payment v·ªõi app_trans_id t·ª´ ZaloPay
                payment.setVnpayTxnRef(appTransId); // S·ª≠ d·ª•ng field n√†y ƒë·ªÉ l∆∞u app_trans_id
                paymentMapper.updatePaymentVnpayTxnRef(payment.getTransactionId(), appTransId);

                return new PaymentResponse(true, "T·∫°o thanh to√°n ZaloPay th√†nh c√¥ng", 
                    payment.getPaymentId(), orderUrl, payment.getTransactionId(), course.getPrice().longValue(), courseId);
            } else {
                // Th·∫•t b·∫°i
                payment.setStatus(Payment.Status.failed);
                paymentMapper.updatePaymentStatus(payment);

                String errorMessage = zaloPayResponse != null ? 
                    (String) zaloPayResponse.get("return_message") : "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng ZaloPay";
                
                return new PaymentResponse(false, "L·ªói t·∫°o thanh to√°n ZaloPay: " + errorMessage);
            }

        } catch (Exception e) {
            e.printStackTrace();
            return new PaymentResponse(false, "L·ªói h·ªá th·ªëng: " + e.getMessage());
        }
    }

    /**
     * X·ª≠ l√Ω callback t·ª´ ZaloPay
     */
    @Transactional
    public PaymentResponse handleZaloPayCallback(Map<String, String> callbackData) {
        try {
            // 1. X√°c th·ª±c callback
            if (!zaloPayService.verifyCallback(callbackData)) {
                return new PaymentResponse(false, "X√°c th·ª±c callback kh√¥ng th√†nh c√¥ng");
            }

            // 2. Parse data t·ª´ callback
            String dataStr = callbackData.get("data");
            // Parse JSON ƒë·ªÉ l·∫•y th√¥ng tin
            com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper();
            @SuppressWarnings("unchecked")
            Map<String, Object> data = mapper.readValue(dataStr, Map.class);

            String appTransId = (String) data.get("app_trans_id");
            Long amount = ((Number) data.get("amount")).longValue();

            // 3. T√¨m payment theo app_trans_id
            Payment payment = paymentMapper.findByVnpayTxnRef(appTransId);
            if (payment == null) {
                return new PaymentResponse(false, "Kh√¥ng t√¨m th·∫•y giao d·ªãch");
            }

            // 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i payment
            payment.setStatus(Payment.Status.completed);
            paymentMapper.updatePaymentStatus(payment);

            // 5. T·ª± ƒë·ªông enroll user v√†o kh√≥a h·ªçc
            try {
                enrollmentsService.enrollUserInCourse(payment.getUserId(), payment.getCourseId());
            } catch (Exception e) {
                // Log error but continue
            }

            return new PaymentResponse(true, "Thanh to√°n ZaloPay th√†nh c√¥ng", 
                payment.getPaymentId(), null, payment.getTransactionId(), amount, payment.getCourseId());

        } catch (Exception e) {
            e.printStackTrace();
            return new PaymentResponse(false, "L·ªói x·ª≠ l√Ω callback ZaloPay: " + e.getMessage());
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng ZaloPay
     */
    public Map<String, Object> queryZaloPayOrder(String appTransId) {
        return zaloPayService.queryOrder(appTransId);
    }

    /**
     * L·∫•y config ZaloPay
     */
    public Map<String, Object> getZaloPayConfig() {
        return zaloPayService.getConfig();
    }
}
// ƒê√£ ƒë√∫ng lu·ªìng truy·ªÅn courseId t·ª´ FE -> PaymentRequest -> Course -> Payment -> DB
